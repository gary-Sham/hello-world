#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

/*
 * Complete the 'nonDivisibleSubset' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. INTEGER k
 *  2. INTEGER_ARRAY s
 */
 //loop for 1 round to remove divisible combination of element
/*void recursiveDivisible(int k, int index, vector<int> s){
    int num = s[index];
    for(int i=index+1; i<s.size(); i++){
        if( ((num+s[i]) % k) == 0){
            s.erase(s.begin()+i);
        }
    }
}*/

int nonDivisibleSubset(int k, vector<int> s) { //4
    //vector<vector<int>> arr;
    vector<int> arrRemaining;
    vector<int> repetitive;
    sort(s.begin(),s.end());
    int max=0;
    
    for(int i=0; i<s.size(); i++){
        arrRemaining.push_back(s[i]%k);
    }
    
    for(int i=0; i<k; i++){
        repetitive.push_back(0);    
    }
    
    for(int i=0; i<arrRemaining.size(); i++){
        int index = arrRemaining[i];
        repetitive[index]++;
    }
    
    //k = 5
    //elem = 12,17,22,3,5,8,19
    //remaining = 2,2,2,3,0,3,4
    //vertex = 0,1,2,3,4
    //reptitive =  1,0,3,2,1
    //0 = 1
    //1+4 = choose one with higher frequency()
    //2+3 = choose one with higher frequency()
    //2,2,2,4
    
    //1,2,7,4
    //1,2,1,1
    cout<<k;
    for(int i=0; i<=k/2; i++){
        cout<<"\nJoin 1: "<<repetitive[i];
        if(i==0 && repetitive[i]>0){ //when it is not a number 
            max++;
            cout<<"\nJoin 2:"<<max;
        }
        else if(k%2==0 && k/2==i){
            max++;
            cout<<"\nJoin 3:"<<max;
        }
        else if(repetitive[i] > repetitive[k-i] && repetitive[i]>0){
            max = max + repetitive[i];
            repetitive.erase(repetitive.begin()+(k-i));
            cout<<"\nJoin 4:"<<max;
        }
        else if(repetitive[i] < repetitive[k-i] && repetitive[k-i]>0 && i!=0){
            cout<<"\nJoin 1:"<<repetitive[k-i];
            max = max + repetitive[k-i];
            cout<<"\nJoin 5:"<<max;
        } 
        else if(k==0 || k==1){
            break;
        }
        cout<<"\n"<<max;
    }
    //1,2,3,0,1,2,3,4,0
    if(k==0 || k==1){
        max = 1;
    }
    
    return max;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string first_multiple_input_temp;
    getline(cin, first_multiple_input_temp);

    vector<string> first_multiple_input = split(rtrim(first_multiple_input_temp));

    int n = stoi(first_multiple_input[0]);

    int k = stoi(first_multiple_input[1]);

    string s_temp_temp;
    getline(cin, s_temp_temp);

    vector<string> s_temp = split(rtrim(s_temp_temp));

    vector<int> s(n);

    for (int i = 0; i < n; i++) {
        int s_item = stoi(s_temp[i]);

        s[i] = s_item;
    }

    int result = nonDivisibleSubset(k, s);

    fout << result << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
