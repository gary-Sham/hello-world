#include <bits/stdc++.h>
//#include<algorithm>
using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);
//int binarySearch(vector<int>new_rec,int alice_score, int &min);
/*
 * Complete the 'climbingLeaderboard' function below.
 *
 * The function is expected to return an INTEGER_ARRAY.
 * The function accepts following parameters:
 *  1. INTEGER_ARRAY ranked
 *  2. INTEGER_ARRAY player
 */

vector<int> climbingLeaderboard(vector<int> ranked, vector<int> player) {
    vector<int>rec_rank;
    vector<int>new_rec;
    int min = 0;
    
    new_rec.push_back(ranked[0]);
    
    for(int i=1; i<ranked.size(); i++){
        if(ranked[i-1]!=ranked[i]){
            new_rec.push_back(ranked[i]);
        }
    }
    
    min = new_rec.size()-1;

    for(int j=0; j<player.size();j++){
        if(player[j]<new_rec.back()){
            rec_rank.push_back(new_rec.size()+1);
        }
        else{
            int lo= 0; //max
            int hi= min; //4 //min change
            int ans = 0;
            
        while(lo<=hi){
        int mid= (lo+hi)/2; //2
        if(new_rec[mid]==player[j]){
            ans = mid;
            min = ans;
            break;
        }
        else if(new_rec[mid]<=player[j] && new_rec[mid-1]>player[j]){ //80<=,<90
            ans = mid;
            min = ans;
            break;
        }
        else if(new_rec[mid+1]<=player[j] && new_rec[mid]>player[j]){//75<=,<80
            ans = mid+1;
            min = ans;
            break;
        }
        else if(new_rec[mid]<player[j]){
            //mid small-index, 
            hi = mid-1;
        }
        else if(new_rec[mid]>player[j]){
            //mid big-index
            lo = mid+1;
        }
        }
        rec_rank.push_back(ans+1);
    }

}
return rec_rank;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string ranked_count_temp;
    getline(cin, ranked_count_temp);

    int ranked_count = stoi(ltrim(rtrim(ranked_count_temp)));

    string ranked_temp_temp;
    getline(cin, ranked_temp_temp);

    vector<string> ranked_temp = split(rtrim(ranked_temp_temp));

    vector<int> ranked(ranked_count);

    for (int i = 0; i < ranked_count; i++) {
        int ranked_item = stoi(ranked_temp[i]);

        ranked[i] = ranked_item;
    }

    string player_count_temp;
    getline(cin, player_count_temp);

    int player_count = stoi(ltrim(rtrim(player_count_temp)));

    string player_temp_temp;
    getline(cin, player_temp_temp);

    vector<string> player_temp = split(rtrim(player_temp_temp));

    vector<int> player(player_count);

    for (int i = 0; i < player_count; i++) {
        int player_item = stoi(player_temp[i]);

        player[i] = player_item;
    }

    vector<int> result = climbingLeaderboard(ranked, player);

    for (int i = 0; i < result.size(); i++) {
        fout << result[i];

        if (i != result.size() - 1) {
            fout << "\n";
        }
    }

    fout << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
